// This #include statement was automatically added by the Particle IDE.
#include <DS18B20.h>
#include <math.h>
char     szInfo[64];
int first;
double   celsius;
double intermediate;
int moisture;
int i = 0;
double   temperature;
int dtemperature; //rounded to nearest integer value
uint32_t msLastMetric;
uint32_t msLastSample;
const int      MAXRETRY          = 4;
float voltage = 0;
int publishCount = 0;
bool succ = 0;
int x=0;
int y=0;
SYSTEM_MODE(MANUAL); 
SYSTEM_THREAD(ENABLED);
//60
#define PUBLISH_INTERVAL 12      //in multiples of SHORT_SLEEP
#define SHORT_SLEEP 300     // in seconds, wake up this often to blink LED
#define BLINK_INTERVAL 50    // in milliseconds, LED will be ON for half this time and OFF for half this time
#define RED 255,0,0,128
#define GREEN 0,255,0,16
#define YELLOW 255,255,0,128
#define WHITE 255,255,255,16
#define BLUE 0,0,255,128
char msg[256];
DS18B20  ds18b20(D9, true);
uint32_t lastReset = 0;


void setup() {
  Serial.begin(115200);
  pinMode(D10,OUTPUT);
  pinMode(D13,OUTPUT);
  
  pinMode(A5,INPUT);
  digitalWrite(D10,LOW);
  int publishCount=0;
  lastReset = millis();
}


void loop() {
    if (millis() - lastReset > 7*24*60*60000UL) {  //force reset after 7 days of working.
      System.reset();
    }
    if (publishCount>=PUBLISH_INTERVAL)
    {
    //delay(1000);
      publishCount = 0;
      digitalWrite(D10,HIGH);
      digitalWrite(D13,HIGH);
      delay(2000);
      getTemp();
      if (isnan(temperature)) temperature=0;
      if (temperature <0) temperature =0;
      dtemperature = int (temperature);
  
       
      first = analogRead(A5);
      if (first>4000)
      {
          first = 4000;
      }
      intermediate = ((4000 - first)/40);
      moisture = intermediate;
      digitalWrite(D10,LOW);
      digitalWrite(D13,LOW);
      voltage = analogRead(BATT) * 0.0011224;
      succ=connect_to_mesh();
      if (succ==true){

        delay(100);
       //snprintf(msg, sizeof(msg),"\"1\":\"%03d\",\"2\":\"%03d\",\"1\":\"%1.1f\"", dtemperature, moisture, voltage); //bin A
       //snprintf(msg, sizeof(msg),"\"3\":\"%03d\",\"4\":\"%03d\",\"2\":\"%1.1f\"", dtemperature, moisture, voltage);  //bin B
       snprintf(msg, sizeof(msg),"\"5\":\"%03d\",\"6\":\"%03d\",\"3\":\"%1.1f\"", dtemperature, moisture, voltage); //bin C
       //snprintf(msg, sizeof(msg),"\"7\":\"%03d\",\"8\":\"%03d\",\"4\":\"%1.1f\"", dtemperature, moisture, voltage);  //bin D
        
       
        x=0;
        while (x<3) //publish 3 times for redundancy
        {
           // Mesh.publish("msg_stationA",msg);  //bin A
            //Mesh.publish("msg_stationB",msg);  //bin B
            Mesh.publish("msg_stationC",msg);  //bin C
            //Mesh.publish("msg_stationD",msg);  //bin D
            for (y=0; y< 1000/BLINK_INTERVAL;y++) blink_LED(WHITE);
            x++;
        }
        
        x=0;
        
             
        publishCount=0;
        
      }
      for (y=0; y< 5000/BLINK_INTERVAL;y++) blink_LED(GREEN); //delay for publish to succeed
      Mesh.disconnect();
      Mesh.off();
      if (!succ) blink_LED(RED); // blink leds and disconnect
      
    }
    else publishCount++;
  blink_LED(BLUE);
  System.sleep({},{},SHORT_SLEEP);
  }


void getTemp(){
  float _temp;
  int   i = 0;

  do {
    _temp = ds18b20.getTemperature();
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);

  if (i < MAXRETRY) {
    celsius = _temp;
    temperature = ds18b20.convertToFahrenheit(_temp);
    //Serial.println(temperature);
  }
  else {
    celsius = temperature = NAN;
    //Serial.println("Invalid reading");
  }
  msLastSample = millis();
}



void blink_LED(int Rcolor, int Gcolor, int Bcolor, int brightness){
  RGB.color(Rcolor,Gcolor,Bcolor);
  RGB.brightness(brightness);
  delay(BLINK_INTERVAL/2);
  Particle.process();
  RGB.brightness(0);
  delay(BLINK_INTERVAL/2);
  Particle.process();
}

bool connect_to_mesh(){  //returns true if mesh connect was successful
  int i,ready;
  //Particle.disconnect();
  Mesh.on();
  Mesh.connect();
  i=0;
  ready=0;
    while(i< (30000/BLINK_INTERVAL) && !ready){ // total 20 seconds timeout waiting for Mesh connect
      ready=Mesh.ready();
      blink_LED(YELLOW);
      //Particle.process();
      i++;
    }
    return(ready);
}
